[gd_resource type="VisualShader" load_steps=15 format=2]

[ext_resource path="res://textures/clear-sea-water.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVectorOp" id=1]

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, -0.5 ]

[sub_resource type="VisualShaderNodeVectorLen" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 3.0 ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=8]

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id=10]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.02, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVec3Uniform" id=11]
uniform_name = "water_velocity"

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "ripple_strength"

[sub_resource type="VisualShaderNodeTexture" id=13]
source = 2

[resource]
code = "shader_type canvas_item;
render_mode unshaded;

uniform vec3 water_velocity;
uniform sampler2D tex_frg_2 : hint_albedo;
uniform float ripple_strength;



void vertex() {
// Output:0

}

void fragment() {
// Input:12
	vec3 n_out12p0 = vec3(UV, 0.0);

// Input:18
	float n_out18p0 = TIME;

// VectorUniform:24
	vec3 n_out24p0 = water_velocity;

// VectorOp:22
	vec3 n_out22p0 = vec3(n_out18p0) * n_out24p0;

// VectorOp:19
	vec3 n_out19p0 = n_out12p0 + n_out22p0;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out19p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorLen:15
	float n_out15p0 = length(n_out2p0);

// ScalarOp:16
	float n_in16p1 = 3.00000;
	float n_out16p0 = n_out15p0 / n_in16p1;

// ScalarOp:14
	float n_in14p1 = -0.50000;
	float n_out14p0 = n_out16p0 + n_in14p1;

// ScalarUniform:25
	float n_out25p0 = ripple_strength;

// ScalarOp:13
	float n_out13p0 = n_out14p0 * n_out25p0;

// VectorOp:11
	vec3 n_out11p0 = n_out12p0 + vec3(n_out13p0);

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out11p0.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -479.2, 190.4 )
mode = 1
flags/light_only = false
flags/unshaded = true
nodes/fragment/0/position = Vector2( 1060, 260 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( 40, 540 )
nodes/fragment/5/node = SubResource( 13 )
nodes/fragment/5/position = Vector2( 640, 240 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 400, 260 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -560, 280 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 760, 560 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 540, 560 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 300, 560 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( 300, 660 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( -580, 460 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( -240, 600 )
nodes/fragment/22/node = SubResource( 10 )
nodes/fragment/22/position = Vector2( -240, 440 )
nodes/fragment/24/node = SubResource( 11 )
nodes/fragment/24/position = Vector2( -600, 580 )
nodes/fragment/25/node = SubResource( 12 )
nodes/fragment/25/position = Vector2( 560, 760 )
nodes/fragment/connections = PoolIntArray( 5, 1, 0, 1, 12, 0, 11, 0, 11, 0, 5, 0, 13, 0, 11, 1, 14, 0, 13, 0, 2, 0, 15, 0, 15, 0, 16, 0, 16, 0, 14, 0, 12, 0, 19, 0, 22, 0, 19, 1, 18, 0, 22, 0, 24, 0, 22, 1, 25, 0, 13, 1, 19, 0, 2, 0, 5, 0, 0, 0 )
